dt[ , .(count=.N) , by='rx_id']
#Check if there are duplicate prescriptions
dt[ , .(count=.N) , by='rx_id'][count>1]
#Check if there are any NAs
round(colSums(is.na(dt)) *100/nrow(dt),1)
doctor_agg_dt <- dt [ , .(group=max(intervention_group ), rx_cnt=.N(rx_id))]
doctor_agg_dt <- dt [ , .(group=max(intervention_group ), rx_cnt=.N(rx_id) , by='doctor_id')]
doctor_agg_dt <- dt [ , .(group=max(intervention_group ), rx_cnt=.N(rx_id)) , by='doctor_id')]
doctor_agg_dt <- dt [ , .(group=max(intervention_group ), rx_cnt=.N(rx_id)) , by='doctor_id']
doctor_agg_dt <- dt [ , .(group=max(intervention_group ), rx_cnt=.N()) , by='doctor_id']
doctor_agg_dt <- dt [ , .(group=max(intervention_group ), rx_cnt=.N , by='doctor_id']
doctor_agg_dt <- dt [ , .(group=max(intervention_group ), rx_cnt=.N) , by='doctor_id']
doctor_agg_dt
doctor_agg_dt <- dt [ , .(group=max(intervention_group ),
rx_cnt=.N) ,
is_pain_drug_pct=round(sum(is_pain_drug)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug)*100/.N,1),
by='doctor_id']
doctor_agg_dt <- dt [ , .(group=max(intervention_group ),
rx_cnt=.N) ,
is_pain_drug_pct=round(sum(is_pain_drug)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug)*100/.N,1)
by='doctor_id']
doctor_agg_dt <- dt [ , .(group=max(intervention_group ),
rx_cnt=.N) ,
is_pain_drug_pct=round(sum(is_pain_drug)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug)*100/.N,1),)
doctor_agg_dt <- dt [ , .(group=max(intervention_group ),
rx_cnt=.N) ,
is_pain_drug_pct=round(sum(is_pain_drug)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug)*100/.N,1)),
doctor_agg_dt <- dt [ , .(group=max(intervention_group ),
rx_cnt=.N ,
is_pain_drug_pct=round(sum(is_pain_drug)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug)*100/.N,1)),
by='doctor_id']
doctor_agg_dt
ggplot(doctor_agg_dt, aes(x=doctor_id, y=is_target_drug_pct)) +
geom_point()
ggplot(doctor_agg_dt, aes(x=doctor_id, y=is_target_drug_pct,colors=group)) +
geom_point()
ggplot(doctor_agg_dt, aes(x=doctor_id, y=is_target_drug_pct,color=group)) +
geom_point()
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density()
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "black") +
geom_density()
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density()
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct) ,colors=group) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density()
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct , colors=group)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density()
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct , colors=group)) +
geom_histogram(aes(y = ..density..) +
geom_density()
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct , colors=group)) +
geom_histogram(aes(y = ..density..)) +
geom_density()
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct , fill=group)) +
geom_histogram(aes(y = ..density..)) +
geom_density()
ggplot(doctor_agg_dt, aes(x=doctor_id, y=is_target_drug_pct,fill=group)) +
geom_point()
ggplot(doctor_agg_dt, aes(x=doctor_id, y=is_target_drug_pct,color=group)) +
geom_point()
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct , fill=group)) +
geom_density()
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct , fill=group)) +
geom_density(position = "dodge")
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct , fill=group)) +
geom_density(alpha = 0.5)
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_pain_drug_pct , fill=group)) +
geom_density(alpha = 0.5)
group_agg  <- doctor_agg_dt [ , .(rx_cnt=.N ,
is_pain_drug_pct=round(sum(is_pain_drug_pct)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug_pct)*100/.N,1)),
by='intervention_group']
group_agg  <- doctor_agg_dt [ , .(rx_cnt=.N ,
is_pain_drug_pct=round(sum(is_pain_drug_pct)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug_pct)*100/.N,1)),
by='group']
group_agg
group_agg <- doctor_agg_dt[, .(rx_cnt = .N,
is_pain_drug_pct = mean(is_pain_drug_pct),
is_target_drug_pct = mean(is_target_drug_pct)),
by = 'group']
group_agg
ggplot(doctor_agg_dt, aes(x=doctor_id, y=is_pain_drug_pct,color=group)) +
geom_point()
ggplot(doctor_agg_dt, aes (y=is_target_drug_pct, x=group)) +
geom_bar(position="stack", stat="identity")
ggplot(dt, aes (y=is_target_drug, x=intervention_group)) +
geom_bar(position="stack", stat="identity")
ggplot(dt, aes (y=rx_id, x=intervention_group)) +
geom_bar(position="stack", stat="identity")
# create a dataset
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
data
ggplot(doctor_agg_dt, aes (y=rx_count, x=intervention_group)) +
geom_bar(position="stack", stat="identity")
ggplot(doctor_agg_dt, aes (y=rx_count, x=group)) +
geom_bar(position="stack", stat="identity")
ggplot(doctor_agg_dt, aes (y=rx_cnt, x=group)) +
geom_bar(position="stack", stat="identity")
ggplot(doctor_agg_dt, aes (y=rx_cnt, x=group)) +
geom_bar(position="fill", stat="identity")
df <- openxlsx::read.xlsx('dataset.xlsx')
dt <- as.data.table(df)
dt[ , doctor_id:=as.character(doctor_id)]
dt[ , rx_id:=as.character(rx_id)]
dt[ , rx_evet :=1]
dt
ggplot(dt, aes (fill=is_target_drug ,y=rx_event, x=group)) +
geom_bar(position="fill", stat="identity")
ggplot(dt, aes (fill=is_target_drug ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
ggplot(dt, aes (fill=is_target_drug ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
dt[ , intervention_group := ifelse(has_seen_msg ==1 ,'treatment','control')]
dt
ggplot(dt, aes (fill=is_target_drug ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
library(tidyverse)
library(data.table)
library(openxlsx)
#Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the categorical variables
factorize_str <- function (dt){
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
df <- openxlsx::read.xlsx('dataset.xlsx')
dt <- as.data.table(df)
dt[ , doctor_id:=as.character(doctor_id)]
dt[ , rx_id:=as.character(rx_id)]
dt[ , rx_evet :=1]
dt
#view summary of dataset
summary(factorize_str(dt))
glimpse(dt)
dt[ , intervention_group := ifelse(has_seen_msg ==1 ,'treatment','control')]
dt
#Check if there are any NAs
round(colSums(is.na(dt)) *100/nrow(dt),1)
#check if a doctor can be in the treatment and the control group
dt[ , uniqueN(intervention_group) , by ='doctor_id'][V1>1]
#Check if there are duplicate prescriptions
dt[ , .(count=.N) , by='rx_id'][count>1]
doctor_agg_dt <- dt [ , .(group=max(intervention_group ),
rx_cnt=.N ,
is_pain_drug_pct=round(sum(is_pain_drug)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug)*100/.N,1)),
by='doctor_id']
doctor_agg_dt
ggplot(doctor_agg_dt, aes(x=doctor_id, y=is_target_drug_pct,color=group)) +
geom_point()
ggplot(dt, aes (fill=is_target_drug ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
library(tidyverse)
library(data.table)
library(openxlsx)
#Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the categorical variables
factorize_str <- function (dt){
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
df <- openxlsx::read.xlsx('dataset.xlsx')
dt <- as.data.table(df)
dt[ , doctor_id:=as.character(doctor_id)]
dt[ , rx_id:=as.character(rx_id)]
dt[ , rx_event :=1]
dt
#view summary of dataset
summary(factorize_str(dt))
glimpse(dt)
dt[ , intervention_group := ifelse(has_seen_msg ==1 ,'treatment','control')]
dt
#Check if there are any NAs
round(colSums(is.na(dt)) *100/nrow(dt),1)
#check if a doctor can be in the treatment and the control group
dt[ , uniqueN(intervention_group) , by ='doctor_id'][V1>1]
#Check if there are duplicate prescriptions
dt[ , .(count=.N) , by='rx_id'][count>1]
doctor_agg_dt <- dt [ , .(group=max(intervention_group ),
rx_cnt=.N ,
is_pain_drug_pct=round(sum(is_pain_drug)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug)*100/.N,1)),
by='doctor_id']
doctor_agg_dt
ggplot(doctor_agg_dt, aes(x=doctor_id, y=is_target_drug_pct,color=group)) +
geom_point()
ggplot(dt, aes (fill=is_target_drug ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
ggplot(dt, aes (fill=drug_name ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
library(tidyverse)
library(data.table)
library(openxlsx)
#Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the categorical variables
factorize_str <- function (dt){
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
df <- openxlsx::read.xlsx('dataset.xlsx')
dt <- as.data.table(df)
dt[ , doctor_id:=as.character(doctor_id)]
dt[ , rx_id:=as.character(rx_id)]
dt[ , rx_event :=1]
dt
#view summary of dataset
summary(factorize_str(dt))
glimpse(dt)
dt[ , intervention_group := ifelse(has_seen_msg ==1 ,'treatment','control')]
dt[ , categorical_target_value := ifelse(is_target_drug ==1 ,'is_target','not_target')]
dt
#Check if there are any NAs
round(colSums(is.na(dt)) *100/nrow(dt),1)
#check if a doctor can be in the treatment and the control group
dt[ , uniqueN(intervention_group) , by ='doctor_id'][V1>1]
#Check if there are duplicate prescriptions
dt[ , .(count=.N) , by='rx_id'][count>1]
doctor_agg_dt <- dt [ , .(group=max(intervention_group ),
rx_cnt=.N ,
is_pain_drug_pct=round(sum(is_pain_drug)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug)*100/.N,1)),
by='doctor_id']
doctor_agg_dt
ggplot(doctor_agg_dt, aes(x=doctor_id, y=is_target_drug_pct,color=group)) +
geom_point()
ggplot(dt, aes (fill=categorical_target_value ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
library(tidyverse)
library(data.table)
library(openxlsx)
#Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the categorical variables
factorize_str <- function (dt){
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
df <- openxlsx::read.xlsx('dataset.xlsx')
dt <- as.data.table(df)
dt[ , doctor_id:=as.character(doctor_id)]
dt[ , rx_id:=as.character(rx_id)]
dt[ , rx_event :=1]
dt
#view summary of dataset
summary(factorize_str(dt))
glimpse(dt)
dt[ , intervention_group := ifelse(has_seen_msg ==1 ,'treatment','control')]
dt[ , categorical_target_value := ifelse(is_target_drug ==0 ,'not_target','is_target')]
dt[ , categorical_pain_value := ifelse(is_pain_drug ==0 ,'not_pain','is_pain')]
dt
#Check if there are any NAs
round(colSums(is.na(dt)) *100/nrow(dt),1)
#check if a doctor can be in the treatment and the control group
dt[ , uniqueN(intervention_group) , by ='doctor_id'][V1>1]
#Check if there are duplicate prescriptions
dt[ , .(count=.N) , by='rx_id'][count>1]
doctor_agg_dt <- dt [ , .(group=max(intervention_group ),
rx_cnt=.N ,
is_pain_drug_pct=round(sum(is_pain_drug)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug)*100/.N,1)),
by='doctor_id']
doctor_agg_dt
ggplot(doctor_agg_dt, aes(x=doctor_id, y=is_target_drug_pct,color=group)) +
geom_point()
ggplot(dt, aes (fill=categorical_target_value ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
ggplot(dt, aes (fill=categorical_pain_value ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
library(tidyverse)
library(data.table)
library(openxlsx)
#Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the categorical variables
factorize_str <- function (dt){
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
df <- openxlsx::read.xlsx('dataset.xlsx')
dt <- as.data.table(df)
dt[ , doctor_id:=as.character(doctor_id)]
dt[ , rx_id:=as.character(rx_id)]
dt[ , rx_event :=1]
dt
#view summary of dataset
summary(factorize_str(dt))
glimpse(dt)
dt[ , intervention_group := ifelse(has_seen_msg ==1 ,'treatment','control')]
dt[ , categorical_target_value := ifelse(is_target_drug ==0 ,'target','not_target')]
dt[ , categorical_pain_value := ifelse(is_pain_drug ==0 ,'pain','not_pain')]
dt
#Check if there are any NAs
round(colSums(is.na(dt)) *100/nrow(dt),1)
#check if a doctor can be in the treatment and the control group
dt[ , uniqueN(intervention_group) , by ='doctor_id'][V1>1]
#Check if there are duplicate prescriptions
dt[ , .(count=.N) , by='rx_id'][count>1]
doctor_agg_dt <- dt [ , .(group=max(intervention_group ),
rx_cnt=.N ,
is_pain_drug_pct=round(sum(is_pain_drug)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug)*100/.N,1)),
by='doctor_id']
doctor_agg_dt
ggplot(doctor_agg_dt, aes(x=doctor_id, y=is_target_drug_pct,color=group)) +
geom_point()
ggplot(dt, aes (fill=categorical_target_value ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
ggplot(dt, aes (fill=categorical_pain_value ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
group_agg2 <-   dt[, .(rx_cnt = .N,
is_pain_drug_pct = mean(is_pain_drug),
is_target_drug_pct = mean(is_target_drug)),
by = 'group']
group_agg2 <-   dt[, .(rx_cnt = .N,
is_pain_drug_pct = mean(is_pain_drug),
is_target_drug_pct = mean(is_target_drug)),
by = 'intervention_group']
group_agg2
group_agg2 <-   dt[, .(rx_cnt = .N,
is_pain_drug_pct = round(mean(is_pain_drug)*100,1),
is_target_drug_pct = round(mean(is_target_drug)*100,1),
by = 'intervention_group']
group_agg2 <-   dt[, .(rx_cnt = .N,
is_pain_drug_pct = round(mean(is_pain_drug)*100,1),
is_target_drug_pct = round(mean(is_target_drug)*100,1)),
by = 'intervention_group']
group_agg2
library(tidyverse)
library(data.table)
library(openxlsx)
#Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the categorical variables
factorize_str <- function (dt){
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
df <- openxlsx::read.xlsx('dataset.xlsx')
dt <- as.data.table(df)
dt[ , doctor_id:=as.character(doctor_id)]
dt[ , rx_id:=as.character(rx_id)]
dt[ , rx_event :=1]
dt
#view summary of dataset
summary(factorize_str(dt))
glimpse(dt)
dt[ , intervention_group := ifelse(has_seen_msg ==1 ,'treatment','control')]
dt[ , categorical_target_value := ifelse(is_target_drug ==1 ,'target','not_target')]
dt[ , categorical_pain_value := ifelse(is_pain_drug ==1 ,'pain','not_pain')]
dt
#Check if there are any NAs
round(colSums(is.na(dt)) *100/nrow(dt),1)
#check if a doctor can be in the treatment and the control group
dt[ , uniqueN(intervention_group) , by ='doctor_id'][V1>1]
#Check if there are duplicate prescriptions
dt[ , .(count=.N) , by='rx_id'][count>1]
doctor_agg_dt <- dt [ , .(group=max(intervention_group ),
rx_cnt=.N ,
is_pain_drug_pct=round(sum(is_pain_drug)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug)*100/.N,1)),
by='doctor_id']
doctor_agg_dt
ggplot(doctor_agg_dt, aes(x=doctor_id, y=is_target_drug_pct,color=group)) +
geom_point()
ggplot(dt, aes (fill=categorical_target_value ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
ggplot(dt, aes (fill=categorical_pain_value ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct , fill=group)) +
geom_density(alpha = 0.5)
doctor_agg_dt[ , variances=var(is_target_drug_pct) , by ='group']
doctor_agg_dt[ , var(is_target_drug_pct) , by ='group']
library(tidyverse)
library(data.table)
library(openxlsx)
#Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the categorical variables
factorize_str <- function (dt){
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
df <- openxlsx::read.xlsx('dataset.xlsx')
dt <- as.data.table(df)
dt[ , doctor_id:=as.character(doctor_id)]
dt[ , rx_id:=as.character(rx_id)]
dt[ , rx_event :=1]
dt
#view summary of dataset
summary(factorize_str(dt))
glimpse(dt)
dt[ , intervention_group := ifelse(has_seen_msg ==1 ,'treatment','control')]
dt[ , categorical_target_value := ifelse(is_target_drug ==1 ,'target','not_target')]
dt[ , categorical_pain_value := ifelse(is_pain_drug ==1 ,'pain','not_pain')]
dt
#Check if there are any NAs
round(colSums(is.na(dt)) *100/nrow(dt),1)
#check if a doctor can be in the treatment and the control group
dt[ , uniqueN(intervention_group) , by ='doctor_id'][V1>1]
#Check if there are duplicate prescriptions
dt[ , .(count=.N) , by='rx_id'][count>1]
doctor_agg_dt <- dt [ , .(group=max(intervention_group ),
rx_cnt=.N ,
is_pain_drug_pct=round(sum(is_pain_drug)*100/.N,1),
is_target_drug_pct=round(sum(is_target_drug)*100/.N,1)),
by='doctor_id']
doctor_agg_dt
ggplot(doctor_agg_dt, aes(x=doctor_id, y=is_target_drug_pct,color=group)) +
geom_point()
ggplot(dt, aes (fill=categorical_target_value ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
ggplot(dt, aes (fill=categorical_pain_value ,y=rx_event, x=intervention_group)) +
geom_bar(position="fill", stat="identity")
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density()
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct , fill=group)) +
geom_histogram(aes(y = ..density..)) +
geom_density()
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct , fill=group)) +
geom_density(alpha = 0.5)
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_pain_drug_pct , fill=group)) +
geom_density(alpha = 0.5)
group_agg <- doctor_agg_dt[, .(rx_cnt = .N,
is_pain_drug_pct = mean(is_pain_drug_pct),
is_target_drug_pct = mean(is_target_drug_pct)),
by = 'group']
group_agg
group_agg2 <-   dt[, .(rx_cnt = .N,
is_pain_drug_pct = round(mean(is_pain_drug)*100,1),
is_target_drug_pct = round(mean(is_target_drug)*100,1)),
by = 'intervention_group']
group_agg2
# Histogram with kernel density
ggplot(doctor_agg_dt, aes(x = is_target_drug_pct , fill=group)) +
geom_density(alpha = 0.5)
#Not perfect but sort of close to normal distribution for both groups
doctor_agg_dt[ , var(is_target_drug_pct) , by ='group']
dt
doctor_agg_dt
test_group_data <- doctor_agg_dt[group=='treatment']$is_target_drug_pct
control_group_data <- doctor_agg_dt[group=='control']$is_target_drug_pct
t.test(test_group_data, control_group_data, var.equal=TRUE)
